ECS:
  https://ecsy.io/docs/#/
  https://ecsy.io/docs/#/manual/Architecture?id=queries
  https://github.com/ecsyjs/ecsy-three
  https://github.com/kaliber5/ecsy-babylon

Union -> Tuple:
  https://github.com/microsoft/TypeScript/issues/13298#issuecomment-468114901
  https://github.com/microsoft/TypeScript/issues/13298#issuecomment-468888651

Fixed length tuple:
  https://github.com/microsoft/TypeScript/issues/26223#issuecomment-410733998

Recursive conditional types:
  https://github.com/microsoft/TypeScript/pull/40002

Example from Mozilla ECSY:
  // MovableSystem
  class MovableSystem extends System {
    // This method will get called on every frame by default
    execute(delta, time) {
      // Iterate through all the entities on the query
      this.queries.moving.results.forEach(entity => {
        var velocity = entity.getComponent(Velocity);
        var position = entity.getMutableComponent(Position);
        position.x += velocity.x * delta;
        position.y += velocity.y * delta;

        if (position.x > canvasWidth + SHAPE_HALF_SIZE) position.x = - SHAPE_HALF_SIZE;
        if (position.x < - SHAPE_HALF_SIZE) position.x = canvasWidth + SHAPE_HALF_SIZE;
        if (position.y > canvasHeight + SHAPE_HALF_SIZE) position.y = - SHAPE_HALF_SIZE;
        if (position.y < - SHAPE_HALF_SIZE) position.y = canvasHeight + SHAPE_HALF_SIZE;
      });
    }
  }

  // Define a query of entities that have "Velocity" and "Position" components
  MovableSystem.queries = {
    moving: {
      components: [Velocity, Position]
    }
  }

ECS cadences
  Cadences can be disjoint (renderer vs simulation) 
  or multiples of each other (net to simulation)

callSystem

Actor model?
  https://github.com/dotnet/Orleans
  https://www.orbit.cloud/orbit/
  https://news.ycombinator.com/item?id=31192795
  https://www.microsoft.com/en-us/research/project/orleans-virtual-actors/

Relationships in an ECS:
  https://ajmmertens.medium.com/building-games-in-ecs-with-entity-relationships-657275ba2c6c

"The Truth:"
  https://ourmachinery.com/post/the-story-behind-the-truth-designing-a-data-model/

Our Machinery ECS:
  https://ourmachinery.com/post/syncing-a-data-oriented-ecs/
  https://ourmachinery.com/post/ecs-and-rendering/
  Annnd it's dead: https://www.reddit.com/r/gamedev/comments/wd4qoh/our_machinery_extensible_engine_made_in_c_just/
    They're asking people to delete their copies in 14 days :/
    They may have editted their EULA for this? https://news.ycombinator.com/item?id=32301177
    Yup, you can't trust closed source: https://twitter.com/AliceICecile/status/1553907629172342787


Bevy:
  V2, archtypes and more:
    https://bevyengine.org/news/bevy-0-5/#component-storage-the-problem
  bundles n stuff: 
    https://bevyengine.org/news/bevy-0-9/#improved-entity-component-apis
  system dependencies:
    https://bevyengine.org/news/bevy-0-5/#explicit-system-dependencies-and-system-labels
    https://bevyengine.org/news/bevy-0-9/#exclusive-system-rework
  "stageless":
    https://github.com/bevyengine/rfcs/pull/45
    https://github.com/bevyengine/rfcs/blob/main/rfcs/45-stageless.md

Phases/dependencies/scheduling design:
  init functions:
    all registered, not automatically run
    provides: list of resources and systems (just initing/reg'ing the system, not running it)
    requires: list of other resource (and systems??) they need to init
    kind of like a one-shot system, gets to request stuff, but also provides stuff and isn't called unless needed
  systems:
    registered by init functions, 
    once registered, will later be canidate scheduling (but not automatically run)
    requires: 
      resources, entity query
      ordering w/ other systems (after "physics", before "render", with "LD51 game")
    provides:
      labels (name, "physics")
  constraints:
    seperate from systems, we can declare ambient constraints like:
    "physics" before "rendering"
    must run: "physics", "ld51 game", "networking" (unordered)
    these are the "top level" things stitch together a game/scene
  solver/scheduler:
    takes all these requires/provides/constraints into account
    comes up with an ordered list of init functions to run
      only running those required to fullfill constraints
    comes up with an ordered list of systems to repeatedly run
      again only running those required to fullfill constraints